import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
from sklearn.metrics import plot_confusion_matrix

# Step 1: Load the bacterial count data and metadata
bacterial_counts = pd.read_csv('/kaggle/input/ibs-optimized/long_format_data_clean_normalized.tsv', sep='\t')
metadata = pd.read_csv('/kaggle/input/ibs-optimized/optimized_metadata_clean.tsv', sep='\t')

# Step 2: Merge the datasets on 'Sample'
data = pd.merge(bacterial_counts, metadata, on='Sample')

# Step 3: Prepare the data for classification
X = data.drop(columns=['Sample', 'IBD_Status'])
y = data['IBD_Status']

# Step 4: Address class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Step 5: Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Step 6: Train Logistic Regression
lr_clf = LogisticRegression(max_iter=1000)
lr_clf.fit(X_train, y_train)

# Step 7: Train Random Forest
rf_clf = RandomForestClassifier(random_state=42)
rf_clf.fit(X_train, y_train)

# Step 8: Train XGBoost with GridSearchCV for hyperparameter tuning
xgb_clf = XGBClassifier(random_state=42)
param_grid = {
    'learning_rate': [0.01, 0.05, 0.1],
    'max_depth': [3, 5, 7],
    'n_estimators': [100, 200, 300],
    'subsample': [0.7, 0.8, 1.0],
    'colsample_bytree': [0.8, 1.0],
    'scale_pos_weight': [1, 10]
}

grid_search = GridSearchCV(xgb_clf, param_grid, scoring='recall', cv=3)
grid_search.fit(X_train, y_train)

# Step 9: Get the best model from GridSearchCV
xgb_clf = grid_search.best_estimator_

# Step 10: Evaluate the models
def evaluate_model(model, X_test, y_test, model_name):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    
    print(f"{model_name} Metrics:")
    print(f"Accuracy: {accuracy:.2f}")
    print(f"Precision: {precision:.2f}")
    print(f"Recall: {recall:.2f}")
    print(f"F1 Score: {f1:.2f}")
    print(f"Confusion Matrix:\n{cm}\n")
    
    return accuracy, precision, recall, f1, cm

# Step 11: Evaluate Logistic Regression
evaluate_model(lr_clf, X_test, y_test, "Logistic Regression")

# Step 12: Evaluate Random Forest
evaluate_model(rf_clf, X_test, y_test, "Random Forest")

# Step 13: Evaluate XGBoost
evaluate_model(xgb_clf, X_test, y_test, "XGBoost (Best Params)")

# Step 14: Plot confusion matrices for each model
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
plot_confusion_matrix(lr_clf, X_test, y_test, cmap='Blues', display_labels=["Non-IBD", "IBD"])
plt.title("Logistic Regression")

plt.subplot(1, 3, 2)
plot_confusion_matrix(rf_clf, X_test, y_test, cmap='Blues', display_labels=["Non-IBD", "IBD"])
plt.title("Random Forest")

plt.subplot(1, 3, 3)
plot_confusion_matrix(xgb_clf, X_test, y_test, cmap='Blues', display_labels=["Non-IBD", "IBD"])
plt.title("XGBoost")

plt.tight_layout()
plt.show()
